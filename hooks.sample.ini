; NOTE - This file is provided as an EXAMPLE blueprint ONLY!
; The phpNova main repository does not use this file in any way 
; as it does not require a hooks.ini file of its own.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;		      phpNova Modular Hooks File		;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Hooks for:  phpSomeModuleName

; Hooks ver:  0.00a

; This file specifies how the afore-mentioned module will be loaded by 
; the phpNova framework.

; Do NOT change this file manually unless you know what you're doing!

; Usage:
;	include : The PHP file(s) that need(s) to be included.  This is 
; 	relative to the path to the module.  Absolute paths are NOT recommended!  
;	You can specify as many "include = " lines as you want.  Use this 
; 	only for files that are considered OPTIONAL and that the module 
; 	can still be successfully loaded without!
; 
;	require : Same as include, except that phpNova will assume that 
; 	the module failed to load if this include was not successful.  
; 	If you're not sure which to use, USE THIS ONE!
; 	Also note that, if there is only one included file and you use 
; 	"include = ", phpNova will automatically assume you meant to use 
; 	"require = " instead.
; 
; 	class_include : A class name to be instantiated by phpNova.  If 
; 	failed, module will still load correctly.  If you're including a 
; 	procedural file that does not require instantiation, you don't need 
; 	to create a class_include entry for it.
; 
; 	class_require : Same as class_include, except that phpNova will 
; 	assume the module failed to load if this class instantiation fails.  
; 	Please see notes on "require" for further guidelines.
; 
; 	class_args_* : Specifies any arguments, in order, that should be passed 
; 	to the class instance *.  See the "Class Args" comments below.

; Class Args:
; 	Syntax:
; 		class_args_{class_name} = "type value[, type value[...]]"
; 
; 	Types:
; 		var
; 			Value is passed without casting or any other modification.
; 			This is NOT recommended!
; 		mixed
; 			Alias of var.
; 		int
; 			Value will be cast in PHP as an integer.
; 		float
; 			Value will be cast in PHP as a float.
; 		string
; 			Value will be cast in PHP as a string and encased in 
; 			single-quotes ('').
; 			Commas and double-quotes must be escaped with \.
; 		bool
; 			Value will be cast in PHP as a boolean.
; 			Acceptable values:  1, 0, TRUE, and FALSE.
; 		binary
; 			Value will be cast in PHP as binary.
; 		array
; 			Value will be cast in PHP as an array.
; 			Use standard PHP syntax for constructing the value itself.
; 			Commas and double-quotes must be escaped with \.
; 		object
; 			Value will be cast in PHP as an object.
; 			Use standard PHP syntax for constructing the value itself.
; 			Commas and double-quotes must be escaped with \.
; 		unset
; 			Value will be cast to NULL in PHP.
; 			For the sake of readability, just set the value to NULL.
; 
; 	Examples:
; 		class_require = "SomeModuleName"
; 		class_args_SomeModuleName = "bool TRUE"
; 
; 		class_include = "LoremIpsum"
; 		class_args_LoremIpsum = "string Hello\, world!, int 1701, float 3.14159265"
; 
; 		class_args_SpaceCowboy = "array( 'hello'\, \"there\"\, 42 ), unset NULL, bool FALSE"
; 		class_include = "SpaceCowboy"
; 
; 		class_args_HowManyDoYouSee = "string There are FOUR lights!"
; 		class_require = "HowManyDoYouSee"


; Note - You don't have to group the includes/requires with their respective 
; instantiations, but doing so is recommended for the sake of human-readability.

; Note - Double-quotes (") are recommended to avoid unpredictable behavior in the PHP INI parser.

[Hooks]

require = "somemodulename.class.php"
class_require = "SomeModuleName"

; Maybe this module comes with an optional feature that involves RSS feed parsing....
include = "magpierss/rss_fetch.inc"

; ....And since it's a procedural file, we don't need to add a class_include entry for it.
